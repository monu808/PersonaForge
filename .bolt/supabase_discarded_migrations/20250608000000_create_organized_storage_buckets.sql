/*
  # Create Organized Storage Buckets

  1. New Buckets
    - replica-training-videos: For training videos used to create Tavus replicas
    - persona-avatars: For persona profile images and avatars
    - generated-videos: For videos generated by Tavus
    - audio-files: For audio files (ElevenLabs TTS, voice clones, etc.)
    - conversation-recordings: For conversation recordings and related media

  2. Security
    - Each bucket has appropriate policies for authenticated users
    - File size limits and MIME type restrictions
    - Proper folder structure permissions
*/

-- Create replica training videos bucket
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'replica-training-videos',
  'replica-training-videos',
  true,
  1073741824, -- 1GB limit for training videos
  ARRAY[
    'video/mp4',
    'video/webm',
    'video/quicktime',
    'video/x-msvideo',
    'video/mov'
  ]
) ON CONFLICT (id) DO UPDATE SET
  file_size_limit = 1073741824,
  allowed_mime_types = ARRAY[
    'video/mp4',
    'video/webm',
    'video/quicktime',
    'video/x-msvideo',
    'video/mov'
  ];

-- Create persona avatars bucket
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'persona-avatars',
  'persona-avatars',
  true,
  10485760, -- 10MB limit for images
  ARRAY[
    'image/jpeg',
    'image/jpg',
    'image/png',
    'image/webp',
    'image/gif'
  ]
) ON CONFLICT (id) DO UPDATE SET
  file_size_limit = 10485760,
  allowed_mime_types = ARRAY[
    'image/jpeg',
    'image/jpg',
    'image/png',
    'image/webp',
    'image/gif'
  ];

-- Create generated videos bucket
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'generated-videos',
  'generated-videos',
  true,
  2147483648, -- 2GB limit for generated videos
  ARRAY[
    'video/mp4',
    'video/webm',
    'video/quicktime',
    'video/x-msvideo'
  ]
) ON CONFLICT (id) DO UPDATE SET
  file_size_limit = 2147483648,
  allowed_mime_types = ARRAY[
    'video/mp4',
    'video/webm',
    'video/quicktime',
    'video/x-msvideo'
  ];

-- Create audio files bucket
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'audio-files',
  'audio-files',
  true,
  524288000, -- 500MB limit for audio files
  ARRAY[
    'audio/mpeg',
    'audio/wav',
    'audio/mp3',
    'audio/m4a',
    'audio/ogg',
    'audio/webm',
    'audio/aac',
    'audio/flac'
  ]
) ON CONFLICT (id) DO UPDATE SET
  file_size_limit = 524288000,
  allowed_mime_types = ARRAY[
    'audio/mpeg',
    'audio/wav',
    'audio/mp3',
    'audio/m4a',
    'audio/ogg',
    'audio/webm',
    'audio/aac',
    'audio/flac'
  ];

-- Create conversation recordings bucket
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'conversation-recordings',
  'conversation-recordings',
  true,
  1073741824, -- 1GB limit for conversation recordings
  ARRAY[
    'video/mp4',
    'video/webm',
    'audio/mpeg',
    'audio/wav',
    'audio/mp3',
    'audio/m4a',
    'audio/ogg',
    'audio/webm'
  ]
) ON CONFLICT (id) DO UPDATE SET
  file_size_limit = 1073741824,
  allowed_mime_types = ARRAY[
    'video/mp4',
    'video/webm',
    'audio/mpeg',
    'audio/wav',
    'audio/mp3',
    'audio/m4a',
    'audio/ogg',
    'audio/webm'
  ];

-- Storage policies for replica-training-videos bucket
CREATE POLICY "Allow authenticated users to select replica training videos"
ON storage.objects FOR SELECT
TO authenticated
USING (bucket_id = 'replica-training-videos');

CREATE POLICY "Allow authenticated users to insert replica training videos"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'replica-training-videos' AND
  auth.role() = 'authenticated'
);

CREATE POLICY "Allow authenticated users to update replica training videos"
ON storage.objects FOR UPDATE
TO authenticated
USING (
  bucket_id = 'replica-training-videos' AND
  auth.role() = 'authenticated'
);

CREATE POLICY "Allow authenticated users to delete replica training videos"
ON storage.objects FOR DELETE
TO authenticated
USING (
  bucket_id = 'replica-training-videos' AND
  auth.role() = 'authenticated'
);

-- Storage policies for persona-avatars bucket
CREATE POLICY "Allow authenticated users to select persona avatars"
ON storage.objects FOR SELECT
TO authenticated
USING (bucket_id = 'persona-avatars');

CREATE POLICY "Allow authenticated users to insert persona avatars"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'persona-avatars' AND
  auth.role() = 'authenticated'
);

CREATE POLICY "Allow authenticated users to update persona avatars"
ON storage.objects FOR UPDATE
TO authenticated
USING (
  bucket_id = 'persona-avatars' AND
  auth.role() = 'authenticated'
);

CREATE POLICY "Allow authenticated users to delete persona avatars"
ON storage.objects FOR DELETE
TO authenticated
USING (
  bucket_id = 'persona-avatars' AND
  auth.role() = 'authenticated'
);

-- Storage policies for generated-videos bucket
CREATE POLICY "Allow authenticated users to select generated videos"
ON storage.objects FOR SELECT
TO authenticated
USING (bucket_id = 'generated-videos');

CREATE POLICY "Allow authenticated users to insert generated videos"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'generated-videos' AND
  auth.role() = 'authenticated'
);

CREATE POLICY "Allow authenticated users to update generated videos"
ON storage.objects FOR UPDATE
TO authenticated
USING (
  bucket_id = 'generated-videos' AND
  auth.role() = 'authenticated'
);

CREATE POLICY "Allow authenticated users to delete generated videos"
ON storage.objects FOR DELETE
TO authenticated
USING (
  bucket_id = 'generated-videos' AND
  auth.role() = 'authenticated'
);

-- Storage policies for audio-files bucket
CREATE POLICY "Allow authenticated users to select audio files"
ON storage.objects FOR SELECT
TO authenticated
USING (bucket_id = 'audio-files');

CREATE POLICY "Allow authenticated users to insert audio files"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'audio-files' AND
  auth.role() = 'authenticated'
);

CREATE POLICY "Allow authenticated users to update audio files"
ON storage.objects FOR UPDATE
TO authenticated
USING (
  bucket_id = 'audio-files' AND
  auth.role() = 'authenticated'
);

CREATE POLICY "Allow authenticated users to delete audio files"
ON storage.objects FOR DELETE
TO authenticated
USING (
  bucket_id = 'audio-files' AND
  auth.role() = 'authenticated'
);

-- Storage policies for conversation-recordings bucket
CREATE POLICY "Allow authenticated users to select conversation recordings"
ON storage.objects FOR SELECT
TO authenticated
USING (bucket_id = 'conversation-recordings');

CREATE POLICY "Allow authenticated users to insert conversation recordings"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'conversation-recordings' AND
  auth.role() = 'authenticated'
);

CREATE POLICY "Allow authenticated users to update conversation recordings"
ON storage.objects FOR UPDATE
TO authenticated
USING (
  bucket_id = 'conversation-recordings' AND
  auth.role() = 'authenticated'
);

CREATE POLICY "Allow authenticated users to delete conversation recordings"
ON storage.objects FOR DELETE
TO authenticated
USING (
  bucket_id = 'conversation-recordings' AND
  auth.role() = 'authenticated'
);
